<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>React Tic Tac Toe</title>

    <!-- Source: https://facebook.github.io/react/tutorial/tutorial.html -->
    <style>
      body {
      font: 14px "Century Gothic", Futura, sans-serif;
      margin: 20px;
      }

      ol, ul {
      padding-left: 30px;
      }

      li.active {
        font-weight: bold;
      }

      .board-row:after {
      clear: both;
      content: "";
      display: table;
      }

      .status {
      margin-bottom: 10px;
      }

      .square {
      background: #fff;
      border: 1px solid #999;
      float: left;
      font-size: 24px;
      font-weight: bold;
      line-height: 34px;
      height: 34px;
      margin-right: -1px;
      margin-top: -1px;
      padding: 0;
      text-align: center;
      width: 34px;
      }

      .square-solved {
      background: #99dd33;
      border: 1px solid #999;
      float: left;
      font-size: 24px;
      font-weight: bold;
      line-height: 34px;
      height: 34px;
      margin-right: -1px;
      margin-top: -1px;
      padding: 0;
      text-align: center;
      width: 34px;
      }

      .square:focus {
      outline: none;
      }

      .kbd-navigation .square:focus {
      background: #ddd;
      }

      .layout {
      display: flex;
      flex-direction: column;
      margin: 40px;
      }

      .userControl {
        margin-bottom: 10px;
      }

      .game {
      display: flex;
      flex-direction: row;
      }

      .game-info {
      margin-left: 20px;
      }
    </style>

  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/uikit/2.27.2/css/uikit.min.css" />
  <script src="https://code.jquery.com/jquery-3.1.1.min.js"></script>  
  <script src="https://cdnjs.cloudflare.com/ajax/libs/uikit/2.27.2/js/uikit.min.js"></script>
</head>

<body>
    <div id="container"></div>

    <script src="https://unpkg.com/react@15/dist/react.js"></script>
    <script src="https://unpkg.com/react-dom@15/dist/react-dom.js"></script>
    <script src="https://fb.me/JSXTransformer-0.13.3.js"></script>

    <script type="text/jsx">
function Square(props) {
  return (
    <button className={props.isSolution ? 'square-solved' : 'square'} onClick={() => props.onClick()}>
      {props.value}
    </button>
  );
}

class Row extends React.Component {
  renderSquare(i) {
    return <Square key={i} value={this.props.squares[i]} isSolution={this.props.solved[i]} onClick={() => this.props.onClick(i)} />;
  }

  render() {
    let cells = [];
    for (let i = 0; i < 3; i++) {
        let idx = this.props.sqrIndex + i;
        cells.push(this.renderSquare(idx)); // Wrong: this.renderSquare({idx}) is actually a shortcut for {idx: idx}
    }
    return (
      <div className="board-row">
        {cells}
      </div>
    );
  }
}

class Board extends React.Component {
  render() {
    let rows = [];
    for (let i = 0; i < 9; i+=3) {
        rows.push(<Row key={i} sqrIndex={i} squares={this.props.squares} solved={this.props.solved} onClick={(i) => this.props.onClick(i)} />);
    }
    return (
      <div>{rows}</div>
    );
  }
}

class Game extends React.Component {
  constructor() {
    super();
    this.init();
  }
  
  init(reinit=false) { // use default value
    // This method enables reuse of state init code
    const state = {
      history: [{
        squares: Array(9).fill(null)
      }],
      xIsNext: true,
      stepNumber: 0,
      solved: Array(9).fill(false)
    };

    if (reinit) {
      this.setState(state)
    }
    else {
      this.state = state;
    }
  }

  handleClick(i) {
    const history = this.state.history;
    const current = history[history.length - 1];
    const squares = current.squares.slice();
    if (calculateWinner(squares) || squares[i]) {
      return;
    }
    squares[i] = this.state.xIsNext ? 'X' : 'O';

    // Putting this logic inside render() slows the app
    // Don't do state changes (setState()) in render()
    const winner = calculateWinner(squares);
    const solvedsqr = Array(9).fill(false);
    if (winner) {
      solvedsqr[winner[0]] = true;
      solvedsqr[winner[1]] = true;
      solvedsqr[winner[2]] = true;
    }

    this.setState({
      history: history.concat([{
        squares: squares
      }]),
      xIsNext: !this.state.xIsNext,
      stepNumber: history.length,
      solved: solvedsqr
    });
  }

  jumpTo(step) {
    this.setState({
      stepNumber: step,
      xIsNext: (step % 2) ? false : true,
    });
  }

  newGame() {
    this.init(true);
  }

  replayMove(move) {
    // TODO There must be a better way to do this than using multiple timers
    setTimeout(
      () => this.jumpTo(move),
      1000*move
    );
  }

  replayMoves() {
    this.state.history.map((obj, i) => this.replayMove(i));
  }

  render() {
    const history = this.state.history;
    const current = history[this.state.stepNumber];
    const winner = calculateWinner(current.squares);

    let status;
    if (winner) {
      status = 'Winner: ' + current.squares[winner[0]];
    } else {
      status = 'Next player: ' + (this.state.xIsNext ? 'X' : 'O');
    }

    const moves = history.map((step, move) => { // step: squares object, move: index
      const desc = move ?
        'Move #' + move :
        'Game start';
      return (
        <li key={move} className={this.state.stepNumber == move ? 'active' : 'inactive'}>
          <a href="#" onClick={() => this.jumpTo(move)}>{desc}</a>
        </li>
      );
    });

    return (
      <div className="layout">
        <div className="userControl">
          <button className="uk-button-primary" type="button" onClick={() => this.newGame()}>New Game</button>
          <button className="uk-button-primary" type="button" onClick={() => this.replayMoves()}>Replay Moves</button>
        </div>
        <div className="game">
          <div className="game-board">
              <Board
                squares={current.squares}
                solved={this.state.solved}
                onClick={(i) => this.handleClick(i)}
              />
          </div>
          <div className="game-info">
            <div>{status}</div>
            <ol>{moves}</ol>
          </div>
        </div>
      </div>
    );
  }
}

ReactDOM.render(
  <Game />,
  document.getElementById('container')
);

function calculateWinner(squares) {
  const lines = [
    [0, 1, 2],
    [3, 4, 5],
    [6, 7, 8],
    [0, 3, 6],
    [1, 4, 7],
    [2, 5, 8],
    [0, 4, 8],
    [2, 4, 6],
  ];
  for (let i = 0; i < lines.length; i++) {
    const [a, b, c] = lines[i];
    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {
      return lines[i];
    }
  }
  return null;
}

function sleep(ms) {
  return new Promise(resolve => setTimeout(resolve, ms));
}
    </script>
</body>

</html>
